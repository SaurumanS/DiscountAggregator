{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lew\\\\saliystrelkovrittersport\\\\ClientApp\\\\src\\\\components\\\\Counter.js\";\nimport React, { Component } from 'react';\nexport class Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecasts: [],\n      loading: true\n    };\n  }\n\n  static renderForecastsTable(forecasts) {\n    return React.createElement(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Names\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Logos\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, forecasts.map(forecast => React.createElement(\"tr\", {\n      key: forecast.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, forecast.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, forecast.logo)))));\n  }\n\n  render() {\n    let contents = this.state.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Loading...\")) : Counter.renderStoreTable(this.state.forecasts);\n    return React.createElement(\"section\", {\n      id: \"contact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"social column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Cock len\"), React.createElement(\"p\", {\n      \"aria-live\": \"polite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Current count: \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.state.currentCount), \"mm\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.incrementCounter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"+1mm\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bg-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })));\n  }\n\n  async populateStoreData() {\n    const response = await fetch('api/Store');\n    const data = await response.json();\n    this.setState({\n      forecasts: data,\n      loading: false\n    });\n  }\n\n}\nCounter.displayName = Counter.name;","map":{"version":3,"sources":["C:\\Users\\Lew\\saliystrelkovrittersport\\ClientApp\\src\\components\\Counter.js"],"names":["React","Component","Counter","constructor","props","state","forecasts","loading","renderForecastsTable","map","forecast","name","logo","render","contents","renderStoreTable","currentCount","incrementCounter","populateStoreData","response","fetch","data","json","setState","displayName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAInCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAb;AACH;;AAED,SAAOC,oBAAP,CAA4BF,SAA5B,EAAuC;AACnC,WACI;AAAO,MAAA,SAAS,EAAC,qBAAjB;AAAuC,yBAAgB,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,SAAS,CAACG,GAAV,CAAcC,QAAQ,IACnB;AAAI,MAAA,GAAG,EAAEA,QAAQ,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,QAAQ,CAACC,IAAd,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,QAAQ,CAACE,IAAd,CAFJ,CADH,CADL,CAPJ,CADJ;AAkBH;;AACDC,EAAAA,MAAM,GAAG;AACT,QAAIC,QAAQ,GAAG,KAAKT,KAAL,CAAWE,OAAX,GACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,CADR,GAEOL,OAAO,CAACa,gBAAR,CAAyB,KAAKV,KAAL,CAAWC,SAApC,CAFtB;AAGE,WACI;AAAS,MAAA,EAAE,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,KAAK,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAGI;AAAG,mBAAU,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKD,KAAL,CAAWW,YAApB,CAArC,OAHJ,EAKI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAE,KAAKC,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CAFJ,EASI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CATJ,CADJ;AAmBH;;AACC,QAAMC,iBAAN,GAA0B;AACtB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAKC,QAAL,CAAc;AAAEjB,MAAAA,SAAS,EAAEe,IAAb;AAAmBd,MAAAA,OAAO,EAAE;AAA5B,KAAd;AACH;;AAzDkC;AAA1BL,O,CACJsB,W,GAActB,OAAO,CAACS,I","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Counter extends Component {\r\n  static displayName = Counter.name;\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { forecasts: [], loading: true };\r\n    }\r\n\r\n    static renderForecastsTable(forecasts) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Names</th>\r\n                        <th>Logos</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {forecasts.map(forecast =>\r\n                        <tr key={forecast.name}>\r\n                            <td>{forecast.name}</td>\r\n                            <td>{forecast.logo}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n    render() {\r\n    let contents = this.state.loading\r\n                         ? <p><em>Loading...</em></p>\r\n                        : Counter.renderStoreTable(this.state.forecasts);\r\n      return (\r\n          <section id=\"contact\">\r\n\r\n              <div class=\"social column\">\r\n                  <h1>Cock len</h1>\r\n\r\n                  <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong>mm</p>\r\n\r\n                  <button className=\"btn btn-primary\" onClick={this.incrementCounter}>+1mm</button>\r\n              </div>\r\n              <div className=\"row\">\r\n                  <div className=\"bg-dark\"></div>\r\n              </div>\r\n\r\n                  \r\n\r\n          </section>\r\n\r\n    );\r\n  }\r\n    async populateStoreData() {\r\n        const response = await fetch('api/Store');\r\n        const data = await response.json();\r\n        this.setState({ forecasts: data, loading: false });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}